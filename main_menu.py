import time
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import sqlite3
from tkinter import messagebox
import tkinter as tk
from datetime import date
from fpdf import FPDF
import smtplib
import ssl
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from dotenv import load_dotenv
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label
from PIL import Image,ImageTk
from fontTools.ttx import process
from matplotlib.pyplot import title

from register import cursor

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("C:/Users/Kushal/OneDrive/Desktop/ShopLens/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def mainScreen(canvas,switch_to_register,shopname,switch_to_mostsold):

    # Creating Table for a store

    con = sqlite3.connect(f"{shopname}.db")
    cursor = con.cursor()
    customerTable = "create table if not exists Customers(CustomerId integer PRIMARY KEY AUTOINCREMENT,Name varchar(255),Email varchar(255) UNIQUE);"
    salesTable = "create table if not exists Sales(SalesId integer PRIMARY KEY AUTOINCREMENT, BillId integer, Item varchar(255), Quantity integer, PricePerUnit integer, Amount Integer, Date varchar(255));"
    buysTable = "create table if not exists Buys(BillId integer PRIMARY KEY AUTOINCREMENT, CustomerId integer);"
    productTable = "create table if not exists Products(ProductId integer PRIMARY KEY AUTOINCREMENT, ProductName varchar(255), Quantity integer, Price integer);"
    cursor.execute(customerTable)
    cursor.execute(salesTable)
    cursor.execute(buysTable)
    cursor.execute(productTable)

    canvas.configure(bg="#A5D1E1")
    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        1440.0,
        71.0,
        fill="#0F3ADA",
        outline="")

    canvas.create_text(
        10.0,
        95.0,
        anchor="nw",
        text="Enter Customer Name  ",
        fill="#000000",
        font=("Inter Bold", 21 * -1)
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        187.5,
        139.5,
        image=entry_image_1
    )
    customerBox = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Arial',16)
    )
    customerBox.place(
        x=10.0,
        y=125.0,
        width=355.0,
        height=27.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        615.5,
        139.5,
        image=entry_image_2
    )
    emailBox = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Arial', 16)
    )
    emailBox.place(
        x=438.0,
        y=125.0,
        width=355.0,
        height=27.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        187.5,
        215.5,
        image=entry_image_3
    )
    productBox = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Arial', 16)
    )
    productBox.place(
        x=10.0,
        y=201.0,
        width=355.0,
        height=27.0
    )

    entry_image_4 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    entry_bg_4 = canvas.create_image(
        615.5,
        215.5,
        image=entry_image_4
    )
    quantityBox = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Arial', 16)
    )
    quantityBox.place(
        x=438.0,
        y=201.0,
        width=355.0,
        height=27.0
    )

    canvas.create_text(
        438.0,
        95.0,
        anchor="nw",
        text="Enter Customer Email",
        fill="#000000",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        10.0,
        169.0,
        anchor="nw",
        text="Enter Product Name",
        fill="#000000",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        438.0,
        169.0,
        anchor="nw",
        text="Enter Quantity",
        fill="#000000",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_rectangle(
        1030.0,
        699.0,
        1385.0,
        746.0,
        fill="#0F3ADA",
        outline="")

    canvas.create_text(
        1036.0,
        708.2451171875,
        anchor="nw",
        text="Total Amount:",
        fill="#FFFFFF",
        font=("Inter", 25 * -1,"bold")
    )

    canvas.create_rectangle(
        0.0,
        262.0,
        1440.0,
        314.0,
        fill="#0F3ADA",
        outline="")

    canvas.create_text(
        80.0,
        275.0,
        anchor="nw",
        text="Sr.No",
        fill="#FFFFFF",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        647.0,
        275.0,
        anchor="nw",
        text="Quantity",
        fill="#FFFFFF",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        916.0,
        275.0,
        anchor="nw",
        text="Price Per Unit",
        fill="#FFFFFF",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        359.0,
        275.0,
        anchor="nw",
        text="Product Name",
        fill="#FFFFFF",
        font=("Inter Bold", 21 * -1)
    )

    canvas.create_text(
        1233.0,
        275.0,
        anchor="nw",
        text="Amount",
        fill="#FFFFFF",
        font=("Inter Bold", 21 * -1)
    )

    entry_image_5 = PhotoImage(
        file=relative_to_assets("entry_5.png"))
    entry_bg_5 = canvas.create_image(
        720.0,
        489.0,
        image=entry_image_5
    )
    billArea = Text(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Arial', 16),
        state="disabled"
    )
    billArea.place(
        x=0.0,
        y=314.0,
        width=1440.0,
        height=348.0
    )

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        1404.0,
        35.0,
        image=image_image_1
    )
    canvas.image = image_image_1


    entry_image_6 = PhotoImage(
        file=relative_to_assets("entry_6.png"))
    entry_bg_6 = canvas.create_image(
        1302.5,
        721.0,
        image=entry_image_6
    )
    totalAmount = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        state="readonly",
        font=('Inter',20,"bold")
    )
    totalAmount.place(
        x=1220.0,
        y=699.0,
        width=165.0,
        height=50.0
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    registerButton = Button(
        text="Register & Update",
        borderwidth=0,
        highlightthickness=0,
        command=lambda :deleteforRegister(var,shopname),
        relief="flat",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=("Inter", 20, "bold")
    )
    registerButton.place(
        x=24.0,
        y=10.0,
        width=246.0,
        height=50.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    mostSoldButton = Button(
        text="Most Sold Product",
        borderwidth=0,
        highlightthickness=0,
        command=lambda: deleteforMostSold(var),
        relief="flat",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=("Inter", 20, "bold")
    )
    mostSoldButton.place(
        x=316.0,
        y=10.0,
        width=266.0,
        height=50.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_3.png"))
    generateButton = Button(
        text="Generate Bill",
        borderwidth=0,
        highlightthickness=0,
        command=lambda: generateBill(),
        relief="flat",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=("Inter", 20, "bold")
    )
    generateButton.place(
        x=620.0,
        y=699.0,
        width=200.0,
        height=50.0
    )

    clearButton = Button(
        text="Clear Bill",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=('Inter',20,'bold'),
        relief="flat",
        borderwidth=0,
        highlightthickness=0,
        command=lambda :clear()
    )

    clearButton.place(
        x=215,
        y=699,
        width=189,
        height=50
    )

    addButton = Button(
        text="Add",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=('Inter', 16, 'bold'),
        relief="flat",
        borderwidth=0,
        highlightthickness=0,
        command=lambda :addItems()
    )
    addButton.place(
        x=836,
        y=197,
        width=89.25732421875,
        height=37.6552734375
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_4.png"))
    checkButton = Button(
        text="Check",
        borderwidth=0,
        highlightthickness=0,
        command=lambda: addCustomer(),
        relief="flat",
        bg="#0F3ADA",
        fg="#FFFFFF",
        font=("Inter", 16, "bold")
    )
    checkButton.place(
        x=836.0,
        y=120.0,
        width=89.25732421875,
        height=37.6552734375
    )
    var = [registerButton, mostSoldButton, customerBox, emailBox, productBox, quantityBox, generateButton, totalAmount,
           billArea, checkButton,clearButton,addButton]
    def deleteforRegister(var,shopname):
        for i in var:
            i.destroy()
        switch_to_register(shopname)

    # window.resizable(False, False)
    # window.mainloop()

    #Creating function to either add customer details

    def addCustomer():

        # Collecting data

        customerName = str(customerBox.get().lower().strip())
        email = str(emailBox.get().lower().strip())
        productName = str(productBox.get().lower().strip())
        quantity = quantityBox.get()
        purDate = str(date.today())

        cursor.execute(f"select CustomerId from Customers where Email = '{email}'")
        temp = cursor.fetchall()
        if temp:
            canvas.create_text(970,130,text="! Email Found !",font=('Inter',12,"bold"))
            customerBox.configure(state="readonly")
            emailBox.configure(state="readonly")
        else:
            customerBox.configure(state="normal")
            emailBox.configure(state="normal")
            cursor.execute(f"insert into Customers(Name,Email) values('{customerName}','{email}');")
            con.commit()
            canvas.create_text(970, 130, text="! Customer Added !", font=('Inter', 12, "bold"))
            customerBox.configure(state="readonly")
            emailBox.configure(state="readonly")

    # Creating Function to generate bill
    def addItems():
        srno = 0
        customerName = str(customerBox.get().lower().strip())
        email = str(emailBox.get().lower().strip())
        productName = str(productBox.get().lower().strip())
        quantity = int(quantityBox.get())
        purDate = str(date.today())
        cursor.execute(f"select Quantity from Products where ProductName = '{productName}';")
        result = cursor.fetchone()
        if result:
            if int(result[0]) > 0:

                #Adding items

                cursor.execute(f"select Price from Products where ProductName = '{productName}'")
                data1 = cursor.fetchone()
                if data1:
                    pricePerUnit = int(data1[0])
                else:
                    pricePerUnit = 0
                amount = quantity * pricePerUnit
                cursor.execute("select BillId from buys order by BillId desc limit 1;")
                data2 = cursor.fetchone()
                if data2:
                    billId = int(data2[0]) + 1
                else:
                    billId = 1000
                cursor.execute(f"insert into sales(Item,Quantity,PricePerUnit,Amount,Date,BillId) values('{productName}',{quantity},{pricePerUnit},{amount},'{purDate}',{billId});")

                # Updating Stock

                stockUpdate = int(result[0]) - quantity
                cursor.execute(f"update products set quantity = {stockUpdate} where ProductName = '{productName}';")

                cursor.execute(f"select sum(Amount) from sales where BillId = {billId};")
                data3 = cursor.fetchone()
                if data3:
                    billAmount = int(data3[0])
                else:
                    billAmount = 0
                srno += 1
                items = f"\t{srno}\t\t\t{productName}\t\t\t{quantity}\t\t\t{pricePerUnit}\t\t\t{amount}"
                billArea.configure(state="normal")
                billArea.insert(tk.END,items + "\n")
                billArea.configure(state="disabled")
                productBox.delete(0,tk.END)
                quantityBox.delete(0,tk.END)

                totalAmount.configure(state="normal")
                totalAmount.delete(0,tk.END)
                totalAmount.insert(tk.END,billAmount)
                totalAmount.configure(state="readonly")

            else:
                messagebox.showinfo(title="Stock Empty",message=f"{productName.capitalize()} is out of Stock")
        else:
            messagebox.showinfo(title="Error",message=f"{productName.capitalize()} not Registered")


    # Creating function to rollback

    def clear():
        con.rollback()
        billArea.configure(state="normal")
        billArea.delete(1.0,tk.END)
        billArea.configure(state="disabled")
        totalAmount.configure(state="normal")
        totalAmount.delete(0,tk.END)
        totalAmount.configure(state="readonly")

    def generateBill():
        con.commit()
        email = str(emailBox.get().lower().strip())
        cursor.execute(f"select CustomerId from customers where email = '{email}';")
        result = cursor.fetchone()
        if result:
            cusId = int(result[0])
        else:
            messagebox.showinfo(title="Error",message="No Customer Found")
        cursor.execute(f"insert into buys(CustomerId) values({cusId})")
        con.commit()
        customerBox.configure(state="normal")
        emailBox.configure(state="normal")
        billArea.configure(state="normal")
        emailBox.configure(state="normal")
        customerBox.delete(0,tk.END)
        emailBox.delete(0,tk.END)
        quantityBox.delete(0,tk.END)
        productBox.delete(0,tk.END)
        totalAmount.configure(state="normal")
        totalAmount.delete(0,tk.END)
        totalAmount.configure(state="readonly")
        billArea.delete(1.0,tk.END)
        customerBox.configure(state="normal")
        emailBox.configure(state="normal")
        cursor.execute(f"select BillId from buys order by BillId desc limit 1;")
        data1 = cursor.fetchone()
        if data1:
            billID = int(data1[0])
        else:
            billID = 1000
        path, email = generatePDF(billID)
        send_email_with_pdf(path, email)
        con.close()

    # Creating function to generate bill in form of PDFs

    def generatePDF(BillId):
        pdf = FPDF(orientation='P', unit='mm', format='A4')
        pdf.add_page()

        # Add Invoice Number
        pdf.set_font(family="Times", style="B", size=32)
        pdf.cell(w=185, h=16, txt="ShopLens", ln=1, align="C")

        # Add Invoice Number
        pdf.set_font(family="Times", style="B", size=16)
        pdf.cell(w=50, h=8, txt=f"BillID: BID{BillId}", ln=1)

        # Fetch and add Date
        query = f"SELECT Date FROM sales WHERE BillId={BillId} GROUP BY Date;"
        cursor.execute(query)
        date = cursor.fetchall()
        pdf.set_font(family="Times", style="B", size=16)
        pdf.cell(w=50, h=8, txt=f"Date : {date[0][0]}", ln=1)

        # Fetch and add Customer Name and Email
        query = f"""
        SELECT c.Name, c.Email 
        FROM customers AS c 
        INNER JOIN buys AS b ON c.CustomerId = b.CustomerId 
        WHERE b.BillId={BillId};
        """
        cursor.execute(query)
        name, email = cursor.fetchone()
        pdf.set_font(family="Times", style="B", size=16)
        pdf.cell(w=50, h=8, txt=f"Name : {str(name).capitalize()}", ln=1)
        pdf.cell(w=50, h=8, txt=f"Email : {email}", ln=1)

        # Add table headers
        columns = ["Item", "Quantity", "Price per Unit", "Amount"]
        pdf.ln(20)
        pdf.set_font(family="Times", style="B", size=12)
        pdf.cell(w=15, h=8, txt="", border=0, align="C")
        pdf.cell(w=50, h=8, txt=columns[0], border=1, align="C")
        pdf.cell(w=30, h=8, txt=columns[1], border=1, align="C")
        pdf.cell(w=50, h=8, txt=columns[2], border=1, align="C")
        pdf.cell(w=30, h=8, txt=columns[3], border=1, align="C", ln=1)

        # Fetch and add sales data
        query = f"""
        SELECT s.Item, s.Quantity, s.PricePerUnit, s.Amount 
        FROM sales AS s 
        WHERE s.BillId={BillId};
        """
        cursor.execute(query)
        total_sum = 0
        for row in cursor.fetchall():
            pdf.set_font(family="Times", size=10, style="B")
            pdf.cell(w=15, h=8, txt="", border=0, align="C")
            pdf.cell(w=50, h=8, txt=str(row[0]).capitalize(), border=1, align="C")
            pdf.set_font(family="Times", size=10)
            pdf.cell(w=30, h=8, txt=str(row[1]), border=1, align="C")
            pdf.cell(w=50, h=8, txt=str(row[2]), border=1, align="C")
            pdf.cell(w=30, h=8, txt=str(row[3]), border=1, align="C", ln=1)
            total_sum += row[3]

        # Add total row
        pdf.set_font(family="Times", style="B", size=12)
        pdf.cell(w=15, h=8, txt="", border=0, align="C")
        pdf.cell(w=50, h=8, txt="Total", border=1, align="C")
        pdf.cell(w=30, h=8, txt="-", border=1, align="C")
        pdf.cell(w=50, h=8, txt="-", border=1, align="C")
        pdf.cell(w=30, h=8, txt=str(total_sum), border=1, align="C", ln=1)

        # Save the PDF
        path = f"./PDFs/{BillId}.pdf"
        pdf.output(path)
        print("PDF generated successfully!")
        cursor.close()
        con.close()
        return (path,email)

    #Sending Email to the customer

    def send_email_with_pdf(pdf_path,receiver):
        subject = "Subject: Your Shopping Bill"
        body = "Thanks for purchase."
        host = "smtp.gmail.com"
        port = 465
        user_name = "kushal.om30@gmail.com"  # Email address
        password = "evju lcnd zmwl wdow"  # App password

        context = ssl.create_default_context()

        # Create the email message
        msg = MIMEMultipart()
        msg['From'] = user_name
        msg['To'] = receiver
        msg['Subject'] = subject

        # Attach the body of the email
        msg.attach(MIMEText(body, 'plain'))

        # Attach the PDF file
        with open(pdf_path, 'rb') as file:
            attach_part = MIMEApplication(file.read(), _subtype="pdf")
            attach_part.add_header('Content-Disposition', 'attachment', filename=os.path.basename(pdf_path))
            msg.attach(attach_part)

        try:
            with smtplib.SMTP_SSL(host, port, context=context) as server:
                server.login(user_name, password)
                server.sendmail(user_name, receiver, msg.as_string())
            print("Email with PDF sent successfully!")
        except Exception as e:
            print(f"Failed to send email: {e}")

    def deleteforMostSold(var):
        for i in var:
            i.destroy()
        switch_to_mostsold(shopname)





if __name__ == "__main__":
    window = Tk()

    window.geometry("1440x788")
    window.configure(bg="#A5D1E1")

    canvas = Canvas(
        window,
        bg="#A5D1E1",
        height=788,
        width=1440,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    con.close()
    mainScreen(canvas)
    window.resizable(False,False)
    window.mainloop()